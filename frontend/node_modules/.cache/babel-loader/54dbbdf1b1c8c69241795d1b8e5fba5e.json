{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Net-Perf-Analyzer\\\\frontend\\\\src\\\\components\\\\NetworkTest.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { useHistory } from 'react-router-dom';\nimport html2canvas from \"html2canvas\";\nimport './NetworkTest.css';\nimport UserService from './UserService';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Enregistrer les composants nécessaires de Chart.js\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst NetworkTest = () => {\n  const [latency, setLatency] = useState(null);\n  const [packetLoss, setPacketLoss] = useState(0);\n  const [isTesting, setIsTesting] = useState(false);\n  const [socket, setSocket] = useState(null);\n  const [error, setError] = useState('');\n  const [latencyData, setLatencyData] = useState([]);\n  const [timeStamps, setTimeStamps] = useState([]);\n  const [bandwidth, setBandwidth] = useState(null);\n  const [bandwidthData, setBandwidthData] = useState([]);\n  const [averageBandwidth, setAverageBandwidth] = useState(0);\n  const [latencySocket, setLatencySocket] = useState(null);\n  const maxDataPoints = 30;\n  const username = UserService.getCurrentUser();\n  useEffect(() => {\n    return () => {\n      if (socket) {\n        socket.close();\n        console.log('WebSocket déconnecté');\n      }\n    };\n  }, [socket]);\n  const startTests = () => {\n    setIsTesting(true);\n    startLatencyTest();\n    startBandwidthTest();\n  };\n  const calculateAverageLatency = () => {\n    if (latencyData.length === 0) return 0;\n    const sum = latencyData.reduce((acc, value) => acc + value, 0);\n    return (sum / latencyData.length).toFixed(2);\n  };\n  const calculateAverageBandwidth = data => {\n    if (data.length === 0) return 0;\n    const sum = data.reduce((acc, value) => acc + value, 0);\n    return (sum / data.length).toFixed(2);\n  };\n  const saveMetrics = async averageLatency => {\n    console.log(\"Nom d'utilisateur actuel :\", username);\n    try {\n      const metrics = {\n        latence: parseFloat(averageLatency),\n        debit: parseFloat(averageBandwidth),\n        packetlost: packetLoss\n      };\n      const data = {\n        username: username,\n        // ou un autre moyen d'obtenir le username\n        performanceData: metrics\n      };\n      const response = await axios.post('http://192.168.22.56:8080/api/network-metrics/save', data);\n      console.log(response.data);\n      alert('Les métriques ont été sauvegardées avec succès.');\n    } catch (error) {\n      console.error(\"Erreur lors de la sauvegarde des métriques :\", error);\n      alert('Erreur lors de la sauvegarde des métriques.');\n    }\n  };\n  const startLatencyTest = () => {\n    if (isTesting) {\n      setError('Le test de latence est déjà en cours.');\n      return;\n    }\n    setError('');\n    setIsTesting(true);\n    const newLatencySocket = new WebSocket(\"ws://192.168.0.167:8080/ws/latency\");\n    newLatencySocket.onopen = () => {\n      console.log('WebSocket de latence connecté');\n      setLatency('Connexion établie. En attente de la latence...');\n    };\n    newLatencySocket.onmessage = event => {\n      const message = event.data.trim();\n      console.log('Message reçu : ', message);\n      if (message.startsWith('Latence:')) {\n        const newLatency = parseFloat(message.split(':')[1].trim());\n        setLatency(newLatency);\n        setLatencyData(prevData => {\n          const updatedData = [...prevData, newLatency];\n          return updatedData.length > maxDataPoints ? updatedData.slice(1) : updatedData;\n        });\n      }\n      if (message.startsWith('Perte de paquets:')) {\n        const newPacketLoss = parseFloat(message.split(':')[1].trim());\n        setPacketLoss(newPacketLoss);\n      }\n      const timestamp = new Date().toLocaleTimeString();\n      setTimeStamps(prevTimestamps => {\n        const updatedTimestamps = [...prevTimestamps, timestamp];\n        return updatedTimestamps.length > maxDataPoints ? updatedTimestamps.slice(1) : updatedTimestamps;\n      });\n    };\n    newLatencySocket.onclose = () => {\n      console.log('WebSocket de latence déconnecté');\n      setIsTesting(false);\n    };\n    newLatencySocket.onerror = error => {\n      console.error('Erreur WebSocket de latence :', error);\n      setError('Erreur WebSocket : Vérifiez votre connexion.');\n      setIsTesting(false);\n    };\n    setLatencySocket(newLatencySocket);\n  };\n  const startBandwidthTest = () => {\n    if (isTesting) {\n      setError(\"Le test de débit est déjà en cours.\");\n      return;\n    }\n    setError(\"\");\n    setIsTesting(true);\n    const newSocket = new WebSocket(\"ws://192.168.22.56:8080/ws/bandwidth\");\n    setSocket(newSocket);\n    let totalDataReceived = 0;\n    let startTime = performance.now();\n    newSocket.onopen = () => {\n      console.log(\"WebSocket connecté\");\n      totalDataReceived = 0;\n      startTime = performance.now();\n    };\n    newSocket.onmessage = event => {\n      const dataSize = event.data.length;\n      totalDataReceived += dataSize;\n      const currentTime = performance.now();\n      const elapsedTimeInSeconds = (currentTime - startTime) / 1000;\n      const bandwidthMbps = totalDataReceived * 8 / (elapsedTimeInSeconds * 1024 * 1024);\n      setBandwidth(bandwidthMbps.toFixed(2));\n      const timestamp = new Date().toLocaleTimeString();\n      setBandwidthData(prevData => {\n        const updatedData = [...prevData, parseFloat(bandwidthMbps.toFixed(2))];\n        const average = calculateAverageBandwidth(updatedData);\n        setAverageBandwidth(average);\n        return updatedData.length > maxDataPoints ? updatedData.slice(1) : updatedData;\n      });\n      setTimeStamps(prevTimestamps => {\n        const updatedTimestamps = [...prevTimestamps, timestamp];\n        return updatedTimestamps.length > maxDataPoints ? updatedTimestamps.slice(1) : updatedTimestamps;\n      });\n    };\n    newSocket.onclose = () => {\n      console.log(\"WebSocket déconnecté\");\n      setIsTesting(false);\n    };\n    newSocket.onerror = error => {\n      console.error(\"Erreur WebSocket :\", error);\n      setError(\"Erreur WebSocket : Vérifiez votre connexion.\");\n      setIsTesting(false);\n    };\n  };\n  const stopTests = () => {\n    if (socket) {\n      socket.close();\n      console.log(\"Tests arrêtés.\");\n      setIsTesting(false);\n    }\n    if (latencySocket) {\n      latencySocket.close();\n      console.log(\"Test de latence arrêté.\");\n      setIsTesting(false);\n    }\n    const averageLatency = calculateAverageLatency();\n    console.log(\"Latence moyenne :\", averageLatency);\n    saveMetrics(averageLatency);\n  };\n  const chartDataLatency = {\n    labels: timeStamps,\n    datasets: [{\n      label: 'Latence (ms)',\n      data: latencyData,\n      borderColor: 'rgba(255, 105, 180, 1)',\n      // Couleur de la courbe\n      backgroundColor: 'rgba(255, 105, 180, 0.2)',\n      // Couleur du fond léger\n      fill: true,\n      // Remplissage sous la courbe\n      tension: 0.4,\n      // Rendre la courbe plus fluide\n      pointRadius: 5,\n      // Taille des points\n      pointBackgroundColor: 'rgba(255, 105, 180, 1)',\n      // Couleur des points\n      borderWidth: 3,\n      // Épaisseur de la ligne\n      pointHoverRadius: 8 // Taille du point au survol\n    }]\n  };\n  const chartData = {\n    labels: timeStamps,\n    datasets: [{\n      label: \"Débit (Mbps)\",\n      data: bandwidthData,\n      borderColor: \"rgba(0, 0, 128, 1)\",\n      // Couleur bleu marine pour la courbe\n      backgroundColor: \"rgba(0, 0, 128, 0.2)\",\n      // Fond léger bleu marine\n      fill: true,\n      // Remplissage sous la courbe\n      tension: 0.4,\n      // Rendre la courbe plus fluide\n      pointRadius: 5,\n      // Taille des points\n      pointBackgroundColor: 'rgba(0, 0, 128, 1)',\n      // Couleur bleu marine des points\n      borderWidth: 2,\n      // Épaisseur de la ligne\n      pointHoverRadius: 8 // Taille du point au survol\n    }],\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Temps',\n          color: '#000'\n        },\n        grid: {\n          color: '#e1e1e1' // Couleur des lignes de grille\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Valeur',\n          color: '#000'\n        },\n        grid: {\n          color: '#e1e1e1' // Couleur des lignes de grille\n        }\n      }\n    }\n  };\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: true\n      },\n      tooltip: {\n        enabled: true\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: false,\n          text: \"Temps\"\n        }\n      },\n      y: {\n        title: {\n          display: true\n        }\n      }\n    }\n  };\n  const generateReport = async () => {\n    const pdf = new jsPDF(\"p\", \"mm\", \"a4\");\n    let currentY = 10; // Position Y de départ\n\n    // Récupérer la date actuelle du test\n    const testDate = new Date().toLocaleString(); // Format local de la date et heure\n\n    // Ajouter un titre\n    pdf.setFontSize(18);\n    pdf.text(\"Rapport de Test Réseau\", 10, currentY);\n    currentY += 15; // Augmenter l'espacement après le titre\n\n    // Ajouter la date du test\n    pdf.setFontSize(12);\n    pdf.text(`Date du test : ${testDate}`, 10, currentY);\n    currentY += 10; // Espacement après la date\n\n    // Détails des tests\n    const startTime = timeStamps[0] || \"N/A\";\n    const endTime = timeStamps[timeStamps.length - 1] || \"N/A\";\n    const maxLatency = latencyData.length ? Math.max(...latencyData) : \"N/A\";\n    const minLatency = latencyData.length ? Math.min(...latencyData) : \"N/A\";\n    const maxBandwidth = bandwidthData.length ? Math.max(...bandwidthData) : \"N/A\";\n    const minBandwidth = bandwidthData.length ? Math.min(...bandwidthData) : \"N/A\";\n    pdf.text(`Durée du test : ${startTime} - ${endTime}`, 10, currentY);\n    currentY += 10;\n    pdf.text(`Latence moyenne : ${calculateAverageLatency()} ms`, 10, currentY);\n    currentY += 10;\n    pdf.text(`Latence maximale : ${maxLatency} ms`, 10, currentY);\n    currentY += 10;\n    pdf.text(`Latence minimale : ${minLatency} ms`, 10, currentY);\n    currentY += 10;\n    pdf.text(`Débit moyen : ${averageBandwidth} Mbps`, 10, currentY);\n    currentY += 10;\n    pdf.text(`Débit maximal : ${maxBandwidth} Mbps`, 10, currentY);\n    currentY += 10;\n    pdf.text(`Débit minimal : ${minBandwidth} Mbps`, 10, currentY);\n    currentY += 10;\n    pdf.text(`Perte de paquets : ${packetLoss}%`, 10, currentY);\n    currentY += 15; // Plus d'espace avant la section des détails\n\n    // Section Détails des Tests\n    pdf.setFontSize(14);\n    pdf.setTextColor(0, 102, 204);\n    pdf.text(\"Détails des Tests:\", 14, currentY);\n    currentY += 10; // Espacement après le titre de section\n\n    pdf.setFontSize(12);\n    pdf.setTextColor(50, 50, 50);\n    pdf.text(`Latence (ms): ${latencyData.join(\", \")}`, 10, currentY);\n    currentY += 10;\n    pdf.text(`Débit (Mbps): ${bandwidthData.join(\", \")}`, 10, currentY);\n    currentY += 15; // Espacement avant d'ajouter les graphiques\n\n    // Ajouter les graphiques\n    const latencyGraph = document.getElementById(\"latencyGraph\");\n    const bandwidthGraph = document.getElementById(\"bandwidthGraph\");\n\n    // Réglages pour éviter les coupures\n    const marginLeft = 10;\n    const marginTop = 10;\n    const maxWidth = 190;\n    const maxHeight = 60;\n\n    // Graphique de latence\n    if (latencyGraph) {\n      const latencyCanvas = await html2canvas(latencyGraph);\n      const latencyImg = latencyCanvas.toDataURL(\"image/png\");\n      pdf.addImage(latencyImg, \"PNG\", marginLeft, marginTop, maxWidth, maxHeight);\n      marginTop += maxHeight + 10; // Ajouter de l'espace entre les graphiques\n    }\n\n    // Graphique de débit\n    if (bandwidthGraph) {\n      pdf.addPage();\n      const bandwidthCanvas = await html2canvas(bandwidthGraph);\n      const bandwidthImg = bandwidthCanvas.toDataURL(\"image/png\");\n      pdf.addImage(bandwidthImg, \"PNG\", marginLeft, marginTop, maxWidth, maxHeight);\n    }\n\n    // Télécharger le fichier PDF\n    pdf.save(\"rapport-test-reseau.pdf\");\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 3\n    }\n  }, \"Test de Performance R\\xE9seau\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"start\",\n    onClick: startTests,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 5\n    }\n  }, \"Go\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"stop\",\n    onClick: stopTests,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 5\n    }\n  }, \"Stop\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 3\n    }\n  }, \"Latence : \", latency), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 3\n    }\n  }, \"Latence moyenne : \", calculateAverageLatency()), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 3\n    }\n  }, \"Perte de paquets : \", packetLoss, \"%\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 3\n    }\n  }, \"D\\xE9bit : \", bandwidth), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 3\n    }\n  }, \"D\\xE9bit moyen : \", averageBandwidth), error && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 13\n    }\n  }, error), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'flex-start',\n      flexGrow: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexDirection: 'column',\n      gap: '80px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"latencyGraph\",\n    style: {\n      height: \"300px\",\n      width: \"80%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      color: '#D5006D'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }\n  }, \"Graphique de la Latence\"), /*#__PURE__*/React.createElement(Line, {\n    data: chartDataLatency,\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"bandwidthGraph\",\n    style: {\n      height: \"300px\",\n      width: \"80%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      color: '#003366'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }\n  }, \"Graphique du D\\xE9bit\"), /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: 'auto',\n      paddingBottom: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: generateReport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }\n  }, \"G\\xE9n\\xE9rer un rapport\")))));\n};\nexport default NetworkTest;","map":{"version":3,"names":["React","useState","useEffect","Line","axios","jsPDF","useHistory","html2canvas","UserService","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","NetworkTest","latency","setLatency","packetLoss","setPacketLoss","isTesting","setIsTesting","socket","setSocket","error","setError","latencyData","setLatencyData","timeStamps","setTimeStamps","bandwidth","setBandwidth","bandwidthData","setBandwidthData","averageBandwidth","setAverageBandwidth","latencySocket","setLatencySocket","maxDataPoints","username","getCurrentUser","close","console","log","startTests","startLatencyTest","startBandwidthTest","calculateAverageLatency","length","sum","reduce","acc","value","toFixed","calculateAverageBandwidth","data","saveMetrics","averageLatency","metrics","latence","parseFloat","debit","packetlost","performanceData","response","post","alert","newLatencySocket","WebSocket","onopen","onmessage","event","message","trim","startsWith","newLatency","split","prevData","updatedData","slice","newPacketLoss","timestamp","Date","toLocaleTimeString","prevTimestamps","updatedTimestamps","onclose","onerror","newSocket","totalDataReceived","startTime","performance","now","dataSize","currentTime","elapsedTimeInSeconds","bandwidthMbps","average","stopTests","chartDataLatency","labels","datasets","label","borderColor","backgroundColor","fill","tension","pointRadius","pointBackgroundColor","borderWidth","pointHoverRadius","chartData","scales","x","title","display","text","color","grid","y","chartOptions","responsive","maintainAspectRatio","plugins","legend","tooltip","enabled","generateReport","pdf","currentY","testDate","toLocaleString","setFontSize","endTime","maxLatency","Math","max","minLatency","min","maxBandwidth","minBandwidth","setTextColor","join","latencyGraph","document","getElementById","bandwidthGraph","marginLeft","marginTop","maxWidth","maxHeight","latencyCanvas","latencyImg","toDataURL","addImage","addPage","bandwidthCanvas","bandwidthImg","save","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","style","flexDirection","justifyContent","flexGrow","alignItems","gap","id","height","width","options","paddingBottom"],"sources":["C:/Users/DELL/Net-Perf-Analyzer/frontend/src/components/NetworkTest.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport html2canvas from \"html2canvas\";\r\nimport './NetworkTest.css';\r\nimport UserService from './UserService';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\n\r\n// Enregistrer les composants nécessaires de Chart.js\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst NetworkTest = () => {\r\n  const [latency, setLatency] = useState(null);\r\n  const [packetLoss, setPacketLoss] = useState(0);\r\n  const [isTesting, setIsTesting] = useState(false);\r\n  const [socket, setSocket] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [latencyData, setLatencyData] = useState([]);\r\n  const [timeStamps, setTimeStamps] = useState([]);\r\n  const [bandwidth, setBandwidth] = useState(null);\r\n  const [bandwidthData, setBandwidthData] = useState([]);\r\n  const [averageBandwidth, setAverageBandwidth] = useState(0);\r\n  const [latencySocket, setLatencySocket] = useState(null);\r\n  const maxDataPoints = 30;\r\n const username = UserService.getCurrentUser();\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.close();\r\n        console.log('WebSocket déconnecté');\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const startTests = () => {\r\n    setIsTesting(true);\r\n    startLatencyTest();\r\n    startBandwidthTest();\r\n  };\r\n\r\n  const calculateAverageLatency = () => {\r\n    if (latencyData.length === 0) return 0;\r\n    const sum = latencyData.reduce((acc, value) => acc + value, 0);\r\n    return (sum / latencyData.length).toFixed(2);\r\n  };\r\n\r\n  const calculateAverageBandwidth = (data) => {\r\n    if (data.length === 0) return 0;\r\n    const sum = data.reduce((acc, value) => acc + value, 0);\r\n    return (sum / data.length).toFixed(2);\r\n  };\r\n\r\n  const saveMetrics = async (averageLatency) => {\r\n\r\n  console.log(\"Nom d'utilisateur actuel :\", username);\r\n    try {\r\n      const metrics = {\r\n        latence: parseFloat(averageLatency),\r\n        debit: parseFloat(averageBandwidth),\r\n        packetlost: packetLoss,\r\n      };\r\n      const data = {\r\n        username: username, // ou un autre moyen d'obtenir le username\r\n        performanceData: metrics\r\n      };\r\n\r\n      const response = await axios.post('http://192.168.22.56:8080/api/network-metrics/save',data);\r\n      console.log(response.data);\r\n      alert('Les métriques ont été sauvegardées avec succès.');\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la sauvegarde des métriques :\", error);\r\n      alert('Erreur lors de la sauvegarde des métriques.');\r\n    }\r\n  };\r\n\r\n  const startLatencyTest = () => {\r\n    if (isTesting) {\r\n      setError('Le test de latence est déjà en cours.');\r\n      return;\r\n    }\r\n    setError('');\r\n    setIsTesting(true);\r\n\r\n    const newLatencySocket = new WebSocket(\"ws://192.168.0.167:8080/ws/latency\");\r\n\r\n    newLatencySocket.onopen = () => {\r\n      console.log('WebSocket de latence connecté');\r\n      setLatency('Connexion établie. En attente de la latence...');\r\n    };\r\n\r\n    newLatencySocket.onmessage = (event) => {\r\n      const message = event.data.trim();\r\n      console.log('Message reçu : ', message);\r\n\r\n      if (message.startsWith('Latence:')) {\r\n        const newLatency = parseFloat(message.split(':')[1].trim());\r\n        setLatency(newLatency);\r\n        setLatencyData(prevData => {\r\n          const updatedData = [...prevData, newLatency];\r\n          return updatedData.length > maxDataPoints ? updatedData.slice(1) : updatedData;\r\n        });\r\n      }\r\n\r\n      if (message.startsWith('Perte de paquets:')) {\r\n        const newPacketLoss = parseFloat(message.split(':')[1].trim());\r\n        setPacketLoss(newPacketLoss);\r\n      }\r\n\r\n      const timestamp = new Date().toLocaleTimeString();\r\n      setTimeStamps(prevTimestamps => {\r\n        const updatedTimestamps = [...prevTimestamps, timestamp];\r\n        return updatedTimestamps.length > maxDataPoints ? updatedTimestamps.slice(1) : updatedTimestamps;\r\n      });\r\n    };\r\n\r\n    newLatencySocket.onclose = () => {\r\n      console.log('WebSocket de latence déconnecté');\r\n      setIsTesting(false);\r\n    };\r\n\r\n    newLatencySocket.onerror = (error) => {\r\n      console.error('Erreur WebSocket de latence :', error);\r\n      setError('Erreur WebSocket : Vérifiez votre connexion.');\r\n      setIsTesting(false);\r\n    };\r\n\r\n    setLatencySocket(newLatencySocket);\r\n  };\r\n\r\n  const startBandwidthTest = () => {\r\n    if (isTesting) {\r\n      setError(\"Le test de débit est déjà en cours.\");\r\n      return;\r\n    }\r\n\r\n    setError(\"\");\r\n    setIsTesting(true);\r\n    const newSocket = new WebSocket(\"ws://192.168.22.56:8080/ws/bandwidth\");\r\n    setSocket(newSocket);\r\n\r\n    let totalDataReceived = 0;\r\n    let startTime = performance.now();\r\n\r\n    newSocket.onopen = () => {\r\n      console.log(\"WebSocket connecté\");\r\n      totalDataReceived = 0;\r\n      startTime = performance.now();\r\n    };\r\n\r\n    newSocket.onmessage = (event) => {\r\n      const dataSize = event.data.length;\r\n      totalDataReceived += dataSize;\r\n\r\n      const currentTime = performance.now();\r\n      const elapsedTimeInSeconds = (currentTime - startTime) / 1000;\r\n\r\n      const bandwidthMbps =\r\n        (totalDataReceived * 8) / (elapsedTimeInSeconds * 1024 * 1024);\r\n      setBandwidth(bandwidthMbps.toFixed(2));\r\n\r\n      const timestamp = new Date().toLocaleTimeString();\r\n      setBandwidthData((prevData) => {\r\n        const updatedData = [...prevData, parseFloat(bandwidthMbps.toFixed(2))];\r\n        const average = calculateAverageBandwidth(updatedData);\r\n        setAverageBandwidth(average);\r\n        return updatedData.length > maxDataPoints\r\n          ? updatedData.slice(1)\r\n          : updatedData;\r\n      });\r\n      setTimeStamps((prevTimestamps) => {\r\n        const updatedTimestamps = [...prevTimestamps, timestamp];\r\n        return updatedTimestamps.length > maxDataPoints\r\n          ? updatedTimestamps.slice(1)\r\n          : updatedTimestamps;\r\n      });\r\n    };\r\n\r\n    newSocket.onclose = () => {\r\n      console.log(\"WebSocket déconnecté\");\r\n      setIsTesting(false);\r\n    };\r\n\r\n    newSocket.onerror = (error) => {\r\n      console.error(\"Erreur WebSocket :\", error);\r\n      setError(\"Erreur WebSocket : Vérifiez votre connexion.\");\r\n      setIsTesting(false);\r\n    };\r\n  };\r\n\r\n  const stopTests = () => {\r\n    if (socket) {\r\n      socket.close();\r\n      console.log(\"Tests arrêtés.\");\r\n      setIsTesting(false);\r\n    }\r\n    if (latencySocket) {\r\n      latencySocket.close();\r\n      console.log(\"Test de latence arrêté.\");\r\n      setIsTesting(false);\r\n    }\r\n\r\n    const averageLatency = calculateAverageLatency();\r\n    console.log(\"Latence moyenne :\", averageLatency);\r\n    saveMetrics(averageLatency);\r\n  };\r\n\r\n  const chartDataLatency = {\r\n    labels: timeStamps,\r\n    datasets: [\r\n      {\r\n        label: 'Latence (ms)',\r\n        data: latencyData,\r\n        borderColor: 'rgba(255, 105, 180, 1)', // Couleur de la courbe\r\n        backgroundColor: 'rgba(255, 105, 180, 0.2)', // Couleur du fond léger\r\n        fill: true, // Remplissage sous la courbe\r\n        tension: 0.4, // Rendre la courbe plus fluide\r\n        pointRadius: 5, // Taille des points\r\n        pointBackgroundColor: 'rgba(255, 105, 180, 1)', // Couleur des points\r\n        borderWidth: 3, // Épaisseur de la ligne\r\n        pointHoverRadius: 8, // Taille du point au survol\r\n      },\r\n    ],\r\n  };\r\n\r\n const chartData = {\r\n   labels: timeStamps,\r\n   datasets: [\r\n     {\r\n       label: \"Débit (Mbps)\",\r\n       data: bandwidthData,\r\n       borderColor: \"rgba(0, 0, 128, 1)\", // Couleur bleu marine pour la courbe\r\n       backgroundColor: \"rgba(0, 0, 128, 0.2)\", // Fond léger bleu marine\r\n       fill: true, // Remplissage sous la courbe\r\n       tension: 0.4, // Rendre la courbe plus fluide\r\n       pointRadius: 5, // Taille des points\r\n       pointBackgroundColor: 'rgba(0, 0, 128, 1)', // Couleur bleu marine des points\r\n       borderWidth: 2, // Épaisseur de la ligne\r\n       pointHoverRadius: 8, // Taille du point au survol\r\n     },\r\n   ],\r\n\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: 'Temps',\r\n          color: '#000',\r\n        },\r\n        grid: {\r\n          color: '#e1e1e1', // Couleur des lignes de grille\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: 'Valeur',\r\n          color: '#000',\r\n        },\r\n        grid: {\r\n          color: '#e1e1e1', // Couleur des lignes de grille\r\n        },\r\n      },\r\n    },\r\n\r\n  };\r\n\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: true,\r\n      },\r\n      tooltip: {\r\n        enabled: true,\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: false,\r\n          text: \"Temps\",\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n const generateReport = async () => {\r\n   const pdf = new jsPDF(\"p\", \"mm\", \"a4\");\r\n   let currentY = 10; // Position Y de départ\r\n\r\n   // Récupérer la date actuelle du test\r\n   const testDate = new Date().toLocaleString();  // Format local de la date et heure\r\n\r\n   // Ajouter un titre\r\n   pdf.setFontSize(18);\r\n   pdf.text(\"Rapport de Test Réseau\", 10, currentY);\r\n   currentY += 15; // Augmenter l'espacement après le titre\r\n\r\n   // Ajouter la date du test\r\n   pdf.setFontSize(12);\r\n   pdf.text(`Date du test : ${testDate}`, 10, currentY);\r\n   currentY += 10; // Espacement après la date\r\n\r\n   // Détails des tests\r\n   const startTime = timeStamps[0] || \"N/A\";\r\n   const endTime = timeStamps[timeStamps.length - 1] || \"N/A\";\r\n   const maxLatency = latencyData.length ? Math.max(...latencyData) : \"N/A\";\r\n   const minLatency = latencyData.length ? Math.min(...latencyData) : \"N/A\";\r\n   const maxBandwidth = bandwidthData.length ? Math.max(...bandwidthData) : \"N/A\";\r\n   const minBandwidth = bandwidthData.length ? Math.min(...bandwidthData) : \"N/A\";\r\n\r\n   pdf.text(`Durée du test : ${startTime} - ${endTime}`, 10, currentY);\r\n   currentY += 10;\r\n   pdf.text(`Latence moyenne : ${calculateAverageLatency()} ms`, 10, currentY);\r\n   currentY += 10;\r\n   pdf.text(`Latence maximale : ${maxLatency} ms`, 10, currentY);\r\n   currentY += 10;\r\n   pdf.text(`Latence minimale : ${minLatency} ms`, 10, currentY);\r\n   currentY += 10;\r\n   pdf.text(`Débit moyen : ${averageBandwidth} Mbps`, 10, currentY);\r\n   currentY += 10;\r\n   pdf.text(`Débit maximal : ${maxBandwidth} Mbps`, 10, currentY);\r\n   currentY += 10;\r\n   pdf.text(`Débit minimal : ${minBandwidth} Mbps`, 10, currentY);\r\n   currentY += 10;\r\n   pdf.text(`Perte de paquets : ${packetLoss}%`, 10, currentY);\r\n   currentY += 15; // Plus d'espace avant la section des détails\r\n\r\n   // Section Détails des Tests\r\n   pdf.setFontSize(14);\r\n   pdf.setTextColor(0, 102, 204);\r\n   pdf.text(\"Détails des Tests:\", 14, currentY);\r\n   currentY += 10; // Espacement après le titre de section\r\n\r\n   pdf.setFontSize(12);\r\n   pdf.setTextColor(50, 50, 50);\r\n   pdf.text(`Latence (ms): ${latencyData.join(\", \")}`, 10, currentY);\r\n   currentY += 10;\r\n   pdf.text(`Débit (Mbps): ${bandwidthData.join(\", \")}`, 10, currentY);\r\n   currentY += 15; // Espacement avant d'ajouter les graphiques\r\n\r\n   // Ajouter les graphiques\r\n   const latencyGraph = document.getElementById(\"latencyGraph\");\r\n   const bandwidthGraph = document.getElementById(\"bandwidthGraph\");\r\n   \r\n\r\n   // Réglages pour éviter les coupures\r\n   const marginLeft = 10;\r\n   const marginTop = 10;\r\n   const maxWidth = 190;\r\n   const maxHeight = 60;\r\n\r\n   // Graphique de latence\r\n   if (latencyGraph) {\r\n     const latencyCanvas = await html2canvas(latencyGraph);\r\n     const latencyImg = latencyCanvas.toDataURL(\"image/png\");\r\n     pdf.addImage(latencyImg, \"PNG\", marginLeft, marginTop, maxWidth, maxHeight);\r\n     marginTop += maxHeight + 10; // Ajouter de l'espace entre les graphiques\r\n   }\r\n\r\n   // Graphique de débit\r\n   if (bandwidthGraph) {\r\n     pdf.addPage();\r\n     const bandwidthCanvas = await html2canvas(bandwidthGraph);\r\n     const bandwidthImg = bandwidthCanvas.toDataURL(\"image/png\");\r\n     pdf.addImage(bandwidthImg, \"PNG\", marginLeft, marginTop, maxWidth, maxHeight);\r\n   }\r\n\r\n\r\n   // Télécharger le fichier PDF\r\n   pdf.save(\"rapport-test-reseau.pdf\");\r\n };\r\n\r\n\r\n   return (\r\n<div>\r\n  <h2>Test de Performance Réseau</h2>\r\n  <div className=\"button-container\">\r\n    <button className=\"start\" onClick={startTests}>Go</button>\r\n    <button className=\"stop\" onClick={stopTests}>Stop</button>\r\n  </div>\r\n\r\n  <p>Latence : {latency}</p>\r\n  <p>Latence moyenne : {calculateAverageLatency()}</p>\r\n  <p>Perte de paquets : {packetLoss}%</p>\r\n  <p>Débit : {bandwidth}</p>\r\n  <p>Débit moyen : {averageBandwidth}</p>\r\n\r\n  {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n<div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'flex-start', flexGrow: 1 }}>\r\n  <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column', gap: '80px' }}>\r\n    <div id=\"latencyGraph\" style={{ height: \"300px\", width: \"80%\" }}>\r\n      <h3 style={{ color: '#D5006D' }}>Graphique de la Latence</h3>\r\n      <Line data={chartDataLatency} options={chartOptions} />\r\n    </div>\r\n\r\n    <div id=\"bandwidthGraph\" style={{ height: \"300px\", width: \"80%\" }}>\r\n      <h3 style={{ color: '#003366' }}>Graphique du Débit</h3>\r\n      <Line data={chartData} options={chartOptions} />\r\n    </div>\r\n\r\n    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: 'auto', paddingBottom: '20px' }}>\r\n      <button onClick={generateReport}>Générer un rapport</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n</div>\r\n\r\n\r\n     );\r\n };\r\n\r\n export default NetworkTest;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}