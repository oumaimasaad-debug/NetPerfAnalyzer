{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Net-Perf-Analyzer\\\\frontend\\\\src\\\\components\\\\NetworkTest.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { useHistory } from 'react-router-dom';\nimport html2canvas from \"html2canvas\";\nimport './NetworkTest.css';\nimport UserService from './UserService';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Enregistrer les composants nécessaires de Chart.js\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst NetworkTest = () => {\n  const [latency, setLatency] = useState(null);\n  const [packetLoss, setPacketLoss] = useState(0);\n  const [isTesting, setIsTesting] = useState(false);\n  const [socket, setSocket] = useState(null);\n  const [error, setError] = useState('');\n  const [latencyData, setLatencyData] = useState([]);\n  const [timeStamps, setTimeStamps] = useState([]);\n  const [bandwidth, setBandwidth] = useState(null);\n  const [bandwidthData, setBandwidthData] = useState([]);\n  const [averageBandwidth, setAverageBandwidth] = useState(0);\n  const [latencySocket, setLatencySocket] = useState(null);\n  const maxDataPoints = 30;\n  const username = UserService.getCurrentUser();\n  useEffect(() => {\n    return () => {\n      if (socket) {\n        socket.close();\n        console.log('WebSocket déconnecté');\n      }\n    };\n  }, [socket]);\n  const startTests = () => {\n    setIsTesting(true);\n    startLatencyTest();\n    startBandwidthTest();\n  };\n  const calculateAverageLatency = () => {\n    if (latencyData.length === 0) return 0;\n    const sum = latencyData.reduce((acc, value) => acc + value, 0);\n    return (sum / latencyData.length).toFixed(2);\n  };\n  const calculateAverageBandwidth = data => {\n    if (data.length === 0) return 0;\n    const sum = data.reduce((acc, value) => acc + value, 0);\n    return (sum / data.length).toFixed(2);\n  };\n  const saveMetrics = async averageLatency => {\n    console.log(\"Nom d'utilisateur actuel :\", username);\n    try {\n      const metrics = {\n        latence: parseFloat(averageLatency),\n        debit: parseFloat(averageBandwidth),\n        packetlost: packetLoss\n      };\n      const data = {\n        username: username,\n        // ou un autre moyen d'obtenir le username\n        performanceData: metrics\n      };\n      const response = await axios.post('http://192.168.0.167:8080/api/network-metrics/save', data);\n      console.log(response.data);\n      alert('Les métriques ont été sauvegardées avec succès.');\n    } catch (error) {\n      console.error(\"Erreur lors de la sauvegarde des métriques :\", error);\n      alert('Erreur lors de la sauvegarde des métriques.');\n    }\n  };\n  const startLatencyTest = () => {\n    if (isTesting) {\n      setError('Le test de latence est déjà en cours.');\n      return;\n    }\n    setError('');\n    setIsTesting(true);\n    const newLatencySocket = new WebSocket(\"ws://192.168.0.167:8080/ws/latency\");\n    newLatencySocket.onopen = () => {\n      console.log('WebSocket de latence connecté');\n      setLatency('Connexion établie. En attente de la latence...');\n    };\n    newLatencySocket.onmessage = event => {\n      const message = event.data.trim();\n      console.log('Message reçu : ', message);\n      if (message.startsWith('Latence:')) {\n        const newLatency = parseFloat(message.split(':')[1].trim());\n        setLatency(newLatency);\n        setLatencyData(prevData => {\n          const updatedData = [...prevData, newLatency];\n          return updatedData.length > maxDataPoints ? updatedData.slice(1) : updatedData;\n        });\n      }\n      if (message.startsWith('Perte de paquets:')) {\n        const newPacketLoss = parseFloat(message.split(':')[1].trim());\n        setPacketLoss(newPacketLoss);\n      }\n      const timestamp = new Date().toLocaleTimeString();\n      setTimeStamps(prevTimestamps => {\n        const updatedTimestamps = [...prevTimestamps, timestamp];\n        return updatedTimestamps.length > maxDataPoints ? updatedTimestamps.slice(1) : updatedTimestamps;\n      });\n    };\n    newLatencySocket.onclose = () => {\n      console.log('WebSocket de latence déconnecté');\n      setIsTesting(false);\n    };\n    newLatencySocket.onerror = error => {\n      console.error('Erreur WebSocket de latence :', error);\n      setError('Erreur WebSocket : Vérifiez votre connexion.');\n      setIsTesting(false);\n    };\n    setLatencySocket(newLatencySocket);\n  };\n  const startBandwidthTest = () => {\n    if (isTesting) {\n      setError(\"Le test de débit est déjà en cours.\");\n      return;\n    }\n    setError(\"\");\n    setIsTesting(true);\n    const newSocket = new WebSocket(\"ws://192.168.0.167:8080/ws/bandwidth\");\n    setSocket(newSocket);\n    let totalDataReceived = 0;\n    let startTime = performance.now();\n    newSocket.onopen = () => {\n      console.log(\"WebSocket connecté\");\n      totalDataReceived = 0;\n      startTime = performance.now();\n    };\n    newSocket.onmessage = event => {\n      const dataSize = event.data.length;\n      totalDataReceived += dataSize;\n      const currentTime = performance.now();\n      const elapsedTimeInSeconds = (currentTime - startTime) / 1000;\n      const bandwidthMbps = totalDataReceived * 8 / (elapsedTimeInSeconds * 1024 * 1024);\n      setBandwidth(bandwidthMbps.toFixed(2));\n      const timestamp = new Date().toLocaleTimeString();\n      setBandwidthData(prevData => {\n        const updatedData = [...prevData, parseFloat(bandwidthMbps.toFixed(2))];\n        const average = calculateAverageBandwidth(updatedData);\n        setAverageBandwidth(average);\n        return updatedData.length > maxDataPoints ? updatedData.slice(1) : updatedData;\n      });\n      setTimeStamps(prevTimestamps => {\n        const updatedTimestamps = [...prevTimestamps, timestamp];\n        return updatedTimestamps.length > maxDataPoints ? updatedTimestamps.slice(1) : updatedTimestamps;\n      });\n    };\n    newSocket.onclose = () => {\n      console.log(\"WebSocket déconnecté\");\n      setIsTesting(false);\n    };\n    newSocket.onerror = error => {\n      console.error(\"Erreur WebSocket :\", error);\n      setError(\"Erreur WebSocket : Vérifiez votre connexion.\");\n      setIsTesting(false);\n    };\n  };\n  const generatePDF = () => {\n    const doc = new jsPDF();\n    doc.text(\"Network Test Report\", 20, 20);\n    doc.autoTable({\n      head: [[\"Métrique\", \"Valeur\"]],\n      body: [[\"Latence\", `${latency} ms`], [\"Perte de Paquets\", `${packetLoss}%`], [\"Débit Moyen\", `${averageBandwidth} Mbps`]],\n      startY: 30\n    });\n    doc.save(\"network_test_report.pdf\");\n  };\n  const getLatencyChartData = () => {\n    return {\n      labels: timeStamps,\n      datasets: [{\n        label: \"Latence (ms)\",\n        data: latencyData,\n        fill: false,\n        borderColor: \"#007bff\",\n        tension: 0.1\n      }]\n    };\n  };\n  const getBandwidthChartData = () => {\n    return {\n      labels: timeStamps,\n      datasets: [{\n        label: \"Débit (Mbps)\",\n        data: bandwidthData,\n        fill: false,\n        borderColor: \"#ff5733\",\n        tension: 0.1\n      }]\n    };\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }\n  }, \"Test de R\\xE9seau\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startTests,\n    disabled: isTesting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }\n  }, \"D\\xE9marrer les tests\"), latency && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 11\n    }\n  }, \"Latence: \", latency, \" ms\")), packetLoss !== null && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  }, \"Perte de paquets: \", packetLoss, \"%\")), error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }\n  }, error), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, \"Graphique de Latence\"), /*#__PURE__*/React.createElement(Line, {\n    data: getLatencyChartData(),\n    className: \"chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  }, \"Graphique de D\\xE9bit\"), /*#__PURE__*/React.createElement(Line, {\n    data: getBandwidthChartData(),\n    className: \"chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pdf-report\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  }, \"Rapport PDF\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: generatePDF,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }\n  }, \"T\\xE9l\\xE9charger le rapport\")));\n};\nexport default NetworkTest;","map":{"version":3,"names":["React","useState","useEffect","Line","axios","jsPDF","useHistory","html2canvas","UserService","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","NetworkTest","latency","setLatency","packetLoss","setPacketLoss","isTesting","setIsTesting","socket","setSocket","error","setError","latencyData","setLatencyData","timeStamps","setTimeStamps","bandwidth","setBandwidth","bandwidthData","setBandwidthData","averageBandwidth","setAverageBandwidth","latencySocket","setLatencySocket","maxDataPoints","username","getCurrentUser","close","console","log","startTests","startLatencyTest","startBandwidthTest","calculateAverageLatency","length","sum","reduce","acc","value","toFixed","calculateAverageBandwidth","data","saveMetrics","averageLatency","metrics","latence","parseFloat","debit","packetlost","performanceData","response","post","alert","newLatencySocket","WebSocket","onopen","onmessage","event","message","trim","startsWith","newLatency","split","prevData","updatedData","slice","newPacketLoss","timestamp","Date","toLocaleTimeString","prevTimestamps","updatedTimestamps","onclose","onerror","newSocket","totalDataReceived","startTime","performance","now","dataSize","currentTime","elapsedTimeInSeconds","bandwidthMbps","average","generatePDF","doc","text","autoTable","head","body","startY","save","getLatencyChartData","labels","datasets","label","fill","borderColor","tension","getBandwidthChartData","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled"],"sources":["C:/Users/DELL/Net-Perf-Analyzer/frontend/src/components/NetworkTest.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport html2canvas from \"html2canvas\";\r\nimport './NetworkTest.css';\r\nimport UserService from './UserService';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\n// Enregistrer les composants nécessaires de Chart.js\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst NetworkTest = () => {\r\n  const [latency, setLatency] = useState(null);\r\n  const [packetLoss, setPacketLoss] = useState(0);\r\n  const [isTesting, setIsTesting] = useState(false);\r\n  const [socket, setSocket] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [latencyData, setLatencyData] = useState([]);\r\n  const [timeStamps, setTimeStamps] = useState([]);\r\n  const [bandwidth, setBandwidth] = useState(null);\r\n  const [bandwidthData, setBandwidthData] = useState([]);\r\n  const [averageBandwidth, setAverageBandwidth] = useState(0);\r\n  const [latencySocket, setLatencySocket] = useState(null);\r\n  const maxDataPoints = 30;\r\n  const username = UserService.getCurrentUser();\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.close();\r\n        console.log('WebSocket déconnecté');\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const startTests = () => {\r\n    setIsTesting(true);\r\n    startLatencyTest();\r\n    startBandwidthTest();\r\n  };\r\n\r\n  const calculateAverageLatency = () => {\r\n    if (latencyData.length === 0) return 0;\r\n    const sum = latencyData.reduce((acc, value) => acc + value, 0);\r\n    return (sum / latencyData.length).toFixed(2);\r\n  };\r\n\r\n  const calculateAverageBandwidth = (data) => {\r\n    if (data.length === 0) return 0;\r\n    const sum = data.reduce((acc, value) => acc + value, 0);\r\n    return (sum / data.length).toFixed(2);\r\n  };\r\n\r\n  const saveMetrics = async (averageLatency) => {\r\n    console.log(\"Nom d'utilisateur actuel :\", username);\r\n    try {\r\n      const metrics = {\r\n        latence: parseFloat(averageLatency),\r\n        debit: parseFloat(averageBandwidth),\r\n        packetlost: packetLoss,\r\n      };\r\n      const data = {\r\n        username: username, // ou un autre moyen d'obtenir le username\r\n        performanceData: metrics\r\n      };\r\n\r\n      const response = await axios.post('http://192.168.0.167:8080/api/network-metrics/save', data);\r\n      console.log(response.data);\r\n      alert('Les métriques ont été sauvegardées avec succès.');\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la sauvegarde des métriques :\", error);\r\n      alert('Erreur lors de la sauvegarde des métriques.');\r\n    }\r\n  };\r\n\r\n  const startLatencyTest = () => {\r\n    if (isTesting) {\r\n      setError('Le test de latence est déjà en cours.');\r\n      return;\r\n    }\r\n    setError('');\r\n    setIsTesting(true);\r\n\r\n    const newLatencySocket = new WebSocket(\"ws://192.168.0.167:8080/ws/latency\");\r\n\r\n    newLatencySocket.onopen = () => {\r\n      console.log('WebSocket de latence connecté');\r\n      setLatency('Connexion établie. En attente de la latence...');\r\n    };\r\n\r\n    newLatencySocket.onmessage = (event) => {\r\n      const message = event.data.trim();\r\n      console.log('Message reçu : ', message);\r\n\r\n      if (message.startsWith('Latence:')) {\r\n        const newLatency = parseFloat(message.split(':')[1].trim());\r\n        setLatency(newLatency);\r\n        setLatencyData(prevData => {\r\n          const updatedData = [...prevData, newLatency];\r\n          return updatedData.length > maxDataPoints ? updatedData.slice(1) : updatedData;\r\n        });\r\n      }\r\n\r\n      if (message.startsWith('Perte de paquets:')) {\r\n        const newPacketLoss = parseFloat(message.split(':')[1].trim());\r\n        setPacketLoss(newPacketLoss);\r\n      }\r\n\r\n      const timestamp = new Date().toLocaleTimeString();\r\n      setTimeStamps(prevTimestamps => {\r\n        const updatedTimestamps = [...prevTimestamps, timestamp];\r\n        return updatedTimestamps.length > maxDataPoints ? updatedTimestamps.slice(1) : updatedTimestamps;\r\n      });\r\n    };\r\n\r\n    newLatencySocket.onclose = () => {\r\n      console.log('WebSocket de latence déconnecté');\r\n      setIsTesting(false);\r\n    };\r\n\r\n    newLatencySocket.onerror = (error) => {\r\n      console.error('Erreur WebSocket de latence :', error);\r\n      setError('Erreur WebSocket : Vérifiez votre connexion.');\r\n      setIsTesting(false);\r\n    };\r\n\r\n    setLatencySocket(newLatencySocket);\r\n  };\r\n\r\n  const startBandwidthTest = () => {\r\n    if (isTesting) {\r\n      setError(\"Le test de débit est déjà en cours.\");\r\n      return;\r\n    }\r\n\r\n    setError(\"\");\r\n    setIsTesting(true);\r\n    const newSocket = new WebSocket(\"ws://192.168.0.167:8080/ws/bandwidth\");\r\n    setSocket(newSocket);\r\n\r\n    let totalDataReceived = 0;\r\n    let startTime = performance.now();\r\n\r\n    newSocket.onopen = () => {\r\n      console.log(\"WebSocket connecté\");\r\n      totalDataReceived = 0;\r\n      startTime = performance.now();\r\n    };\r\n\r\n    newSocket.onmessage = (event) => {\r\n      const dataSize = event.data.length;\r\n      totalDataReceived += dataSize;\r\n\r\n      const currentTime = performance.now();\r\n      const elapsedTimeInSeconds = (currentTime - startTime) / 1000;\r\n\r\n      const bandwidthMbps = (totalDataReceived * 8) / (elapsedTimeInSeconds * 1024 * 1024);\r\n      setBandwidth(bandwidthMbps.toFixed(2));\r\n\r\n      const timestamp = new Date().toLocaleTimeString();\r\n      setBandwidthData((prevData) => {\r\n        const updatedData = [...prevData, parseFloat(bandwidthMbps.toFixed(2))];\r\n        const average = calculateAverageBandwidth(updatedData);\r\n        setAverageBandwidth(average);\r\n        return updatedData.length > maxDataPoints\r\n          ? updatedData.slice(1)\r\n          : updatedData;\r\n      });\r\n      setTimeStamps((prevTimestamps) => {\r\n        const updatedTimestamps = [...prevTimestamps, timestamp];\r\n        return updatedTimestamps.length > maxDataPoints\r\n          ? updatedTimestamps.slice(1)\r\n          : updatedTimestamps;\r\n      });\r\n    };\r\n\r\n    newSocket.onclose = () => {\r\n      console.log(\"WebSocket déconnecté\");\r\n      setIsTesting(false);\r\n    };\r\n\r\n    newSocket.onerror = (error) => {\r\n      console.error(\"Erreur WebSocket :\", error);\r\n      setError(\"Erreur WebSocket : Vérifiez votre connexion.\");\r\n      setIsTesting(false);\r\n    };\r\n  };\r\n\r\n  const generatePDF = () => {\r\n    const doc = new jsPDF();\r\n    doc.text(\"Network Test Report\", 20, 20);\r\n\r\n    doc.autoTable({\r\n      head: [[\"Métrique\", \"Valeur\"]],\r\n      body: [\r\n        [\"Latence\", `${latency} ms`],\r\n        [\"Perte de Paquets\", `${packetLoss}%`],\r\n        [\"Débit Moyen\", `${averageBandwidth} Mbps`],\r\n      ],\r\n      startY: 30,\r\n    });\r\n\r\n    doc.save(\"network_test_report.pdf\");\r\n  };\r\n\r\n  const getLatencyChartData = () => {\r\n    return {\r\n      labels: timeStamps,\r\n      datasets: [\r\n        {\r\n          label: \"Latence (ms)\",\r\n          data: latencyData,\r\n          fill: false,\r\n          borderColor: \"#007bff\",\r\n          tension: 0.1,\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  const getBandwidthChartData = () => {\r\n    return {\r\n      labels: timeStamps,\r\n      datasets: [\r\n        {\r\n          label: \"Débit (Mbps)\",\r\n          data: bandwidthData,\r\n          fill: false,\r\n          borderColor: \"#ff5733\",\r\n          tension: 0.1,\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Test de Réseau</h1>\r\n      <button onClick={startTests} disabled={isTesting}>\r\n        Démarrer les tests\r\n      </button>\r\n      {latency && (\r\n        <div>\r\n          <h2>Latence: {latency} ms</h2>\r\n        </div>\r\n      )}\r\n      {packetLoss !== null && (\r\n        <div>\r\n          <h2>Perte de paquets: {packetLoss}%</h2>\r\n        </div>\r\n      )}\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      <div className=\"chart-container\">\r\n        <h2>Graphique de Latence</h2>\r\n        <Line data={getLatencyChartData()} className=\"chart\" />\r\n        <h2>Graphique de Débit</h2>\r\n        <Line data={getBandwidthChartData()} className=\"chart\" />\r\n      </div>\r\n      <div className=\"pdf-report\">\r\n        <h2>Rapport PDF</h2>\r\n        <button onClick={generatePDF}>Télécharger le rapport</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NetworkTest;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}