{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Line}from'react-chartjs-2';import axios from'axios';import jsPDF from\"jspdf\";import\"jspdf-autotable\";import{useHistory}from'react-router-dom';import html2canvas from\"html2canvas\";import'./NetworkTest.css';import UserService from'./UserService';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend}from'chart.js';// Enregistrer les composants nécessaires de Chart.js\nChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend);const NetworkTest=()=>{const[latency,setLatency]=useState(null);const[packetLoss,setPacketLoss]=useState(0);const[isTesting,setIsTesting]=useState(false);const[socket,setSocket]=useState(null);const[error,setError]=useState('');const[latencyData,setLatencyData]=useState([]);const[timeStamps,setTimeStamps]=useState([]);const[bandwidth,setBandwidth]=useState(null);const[bandwidthData,setBandwidthData]=useState([]);const[averageBandwidth,setAverageBandwidth]=useState(0);const[latencySocket,setLatencySocket]=useState(null);const maxDataPoints=30;const username=UserService.getCurrentUser();useEffect(()=>{return()=>{if(socket){socket.close();console.log('WebSocket déconnecté');}};},[socket]);const startTests=()=>{setIsTesting(true);startLatencyTest();startBandwidthTest();};const calculateAverageLatency=()=>{if(latencyData.length===0)return 0;const sum=latencyData.reduce((acc,value)=>acc+value,0);return(sum/latencyData.length).toFixed(2);};const calculateAverageBandwidth=data=>{if(data.length===0)return 0;const sum=data.reduce((acc,value)=>acc+value,0);return(sum/data.length).toFixed(2);};const saveMetrics=async averageLatency=>{console.log(\"Nom d'utilisateur actuel :\",username);try{const metrics={latence:parseFloat(averageLatency),debit:parseFloat(averageBandwidth),packetlost:packetLoss};const data={username:username,// ou un autre moyen d'obtenir le username\nperformanceData:metrics};const response=await axios.post('http://192.168.22.56:8080/api/network-metrics/save',data);console.log(response.data);alert('Les métriques ont été sauvegardées avec succès.');}catch(error){console.error(\"Erreur lors de la sauvegarde des métriques :\",error);alert('Erreur lors de la sauvegarde des métriques.');}};const startLatencyTest=()=>{if(isTesting){setError('Le test de latence est déjà en cours.');return;}setError('');setIsTesting(true);const newLatencySocket=new WebSocket(\"ws://192.168.0.167:8080/ws/latency\");newLatencySocket.onopen=()=>{console.log('WebSocket de latence connecté');setLatency('Connexion établie. En attente de la latence...');};newLatencySocket.onmessage=event=>{const message=event.data.trim();console.log('Message reçu : ',message);if(message.startsWith('Latence:')){const newLatency=parseFloat(message.split(':')[1].trim());setLatency(newLatency);setLatencyData(prevData=>{const updatedData=[...prevData,newLatency];return updatedData.length>maxDataPoints?updatedData.slice(1):updatedData;});}if(message.startsWith('Perte de paquets:')){const newPacketLoss=parseFloat(message.split(':')[1].trim());setPacketLoss(newPacketLoss);}const timestamp=new Date().toLocaleTimeString();setTimeStamps(prevTimestamps=>{const updatedTimestamps=[...prevTimestamps,timestamp];return updatedTimestamps.length>maxDataPoints?updatedTimestamps.slice(1):updatedTimestamps;});};newLatencySocket.onclose=()=>{console.log('WebSocket de latence déconnecté');setIsTesting(false);};newLatencySocket.onerror=error=>{console.error('Erreur WebSocket de latence :',error);setError('Erreur WebSocket : Vérifiez votre connexion.');setIsTesting(false);};setLatencySocket(newLatencySocket);};const startBandwidthTest=()=>{if(isTesting){setError(\"Le test de débit est déjà en cours.\");return;}setError(\"\");setIsTesting(true);const newSocket=new WebSocket(\"ws://192.168.22.56:8080/ws/bandwidth\");setSocket(newSocket);let totalDataReceived=0;let startTime=performance.now();newSocket.onopen=()=>{console.log(\"WebSocket connecté\");totalDataReceived=0;startTime=performance.now();};newSocket.onmessage=event=>{const dataSize=event.data.length;totalDataReceived+=dataSize;const currentTime=performance.now();const elapsedTimeInSeconds=(currentTime-startTime)/1000;const bandwidthMbps=totalDataReceived*8/(elapsedTimeInSeconds*1024*1024);setBandwidth(bandwidthMbps.toFixed(2));const timestamp=new Date().toLocaleTimeString();setBandwidthData(prevData=>{const updatedData=[...prevData,parseFloat(bandwidthMbps.toFixed(2))];const average=calculateAverageBandwidth(updatedData);setAverageBandwidth(average);return updatedData.length>maxDataPoints?updatedData.slice(1):updatedData;});setTimeStamps(prevTimestamps=>{const updatedTimestamps=[...prevTimestamps,timestamp];return updatedTimestamps.length>maxDataPoints?updatedTimestamps.slice(1):updatedTimestamps;});};newSocket.onclose=()=>{console.log(\"WebSocket déconnecté\");setIsTesting(false);};newSocket.onerror=error=>{console.error(\"Erreur WebSocket :\",error);setError(\"Erreur WebSocket : Vérifiez votre connexion.\");setIsTesting(false);};};const stopTests=()=>{if(socket){socket.close();console.log(\"Tests arrêtés.\");setIsTesting(false);}if(latencySocket){latencySocket.close();console.log(\"Test de latence arrêté.\");setIsTesting(false);}const averageLatency=calculateAverageLatency();console.log(\"Latence moyenne :\",averageLatency);saveMetrics(averageLatency);};const chartDataLatency={labels:timeStamps,datasets:[{label:'Latence (ms)',data:latencyData,borderColor:'rgba(255, 105, 180, 1)',// Couleur de la courbe\nbackgroundColor:'rgba(255, 105, 180, 0.2)',// Couleur du fond léger\nfill:true,// Remplissage sous la courbe\ntension:0.4,// Rendre la courbe plus fluide\npointRadius:5,// Taille des points\npointBackgroundColor:'rgba(255, 105, 180, 1)',// Couleur des points\nborderWidth:3,// Épaisseur de la ligne\npointHoverRadius:8// Taille du point au survol\n}]};const chartData={labels:timeStamps,datasets:[{label:\"Débit (Mbps)\",data:bandwidthData,borderColor:\"rgba(0, 0, 128, 1)\",// Couleur bleu marine pour la courbe\nbackgroundColor:\"rgba(0, 0, 128, 0.2)\",// Fond léger bleu marine\nfill:true,// Remplissage sous la courbe\ntension:0.4,// Rendre la courbe plus fluide\npointRadius:5,// Taille des points\npointBackgroundColor:'rgba(0, 0, 128, 1)',// Couleur bleu marine des points\nborderWidth:2,// Épaisseur de la ligne\npointHoverRadius:8// Taille du point au survol\n}],scales:{x:{title:{display:true,text:'Temps',color:'#000'},grid:{color:'#e1e1e1'// Couleur des lignes de grille\n}},y:{title:{display:true,text:'Valeur',color:'#000'},grid:{color:'#e1e1e1'// Couleur des lignes de grille\n}}}};const chartOptions={responsive:true,maintainAspectRatio:false,plugins:{legend:{display:true},tooltip:{enabled:true}},scales:{x:{title:{display:false,text:\"Temps\"}},y:{title:{display:true}}}};const generateReport=async()=>{const pdf=new jsPDF(\"p\",\"mm\",\"a4\");let currentY=10;// Position Y de départ\n// Récupérer la date actuelle du test\nconst testDate=new Date().toLocaleString();// Format local de la date et heure\n// Ajouter un titre\npdf.setFontSize(18);pdf.text(\"Rapport de Test Réseau\",10,currentY);currentY+=15;// Augmenter l'espacement après le titre\n// Ajouter la date du test\npdf.setFontSize(12);pdf.text(\"Date du test : \".concat(testDate),10,currentY);currentY+=10;// Espacement après la date\n// Détails des tests\nconst startTime=timeStamps[0]||\"N/A\";const endTime=timeStamps[timeStamps.length-1]||\"N/A\";const maxLatency=latencyData.length?Math.max(...latencyData):\"N/A\";const minLatency=latencyData.length?Math.min(...latencyData):\"N/A\";const maxBandwidth=bandwidthData.length?Math.max(...bandwidthData):\"N/A\";const minBandwidth=bandwidthData.length?Math.min(...bandwidthData):\"N/A\";pdf.text(\"Dur\\xE9e du test : \".concat(startTime,\" - \").concat(endTime),10,currentY);currentY+=10;pdf.text(\"Latence moyenne : \".concat(calculateAverageLatency(),\" ms\"),10,currentY);currentY+=10;pdf.text(\"Latence maximale : \".concat(maxLatency,\" ms\"),10,currentY);currentY+=10;pdf.text(\"Latence minimale : \".concat(minLatency,\" ms\"),10,currentY);currentY+=10;pdf.text(\"D\\xE9bit moyen : \".concat(averageBandwidth,\" Mbps\"),10,currentY);currentY+=10;pdf.text(\"D\\xE9bit maximal : \".concat(maxBandwidth,\" Mbps\"),10,currentY);currentY+=10;pdf.text(\"D\\xE9bit minimal : \".concat(minBandwidth,\" Mbps\"),10,currentY);currentY+=10;pdf.text(\"Perte de paquets : \".concat(packetLoss,\"%\"),10,currentY);currentY+=15;// Plus d'espace avant la section des détails\n// Section Détails des Tests\npdf.setFontSize(12);pdf.setTextColor(0,102,204);pdf.text(\"Détails des Tests:\",14,currentY);currentY+=10;// Espacement après le titre de section\npdf.setFontSize(12);pdf.setTextColor(50,50,50);pdf.text(\"Latence (ms): \".concat(latencyData.join(\", \")),10,currentY);currentY+=10;pdf.text(\"D\\xE9bit (Mbps): \".concat(bandwidthData.join(\", \")),10,currentY);currentY+=8;// Espacement avant d'ajouter les graphiques\n// Ajouter les graphiques\nconst latencyGraph=document.getElementById(\"latencyGraph\");const bandwidthGraph=document.getElementById(\"bandwidthGraph\");if(latencyGraph){const latencyCanvas=await html2canvas(latencyGraph,{scale:2,// Augmente la qualité de la capture\nwidth:latencyGraph.scrollWidth,// Capture la largeur complète\nheight:latencyGraph.scrollHeight// Capture la hauteur complète\n});const latencyImg=latencyCanvas.toDataURL(\"image/png\");pdf.addImage(latencyImg,\"PNG\",10,currentY,190,80);// Ajuster la taille d'image si nécessaire\ncurrentY+=85;// Ajuster l'espacement après le graphique de latence\n}if(bandwidthGraph){pdf.addPage();const bandwidthCanvas=await html2canvas(bandwidthGraph,{scale:2,// Augmente la qualité de la capture\nwidth:bandwidthGraph.scrollWidth,// Capture la largeur complète\nheight:bandwidthGraph.scrollHeight// Capture la hauteur complète\n});const bandwidthImg=bandwidthCanvas.toDataURL(\"image/png\");pdf.addImage(bandwidthImg,\"PNG\",10,10,190,80);// Ajuster la taille d'image si nécessaire\n}// Télécharger le fichier PDF\npdf.save(\"rapport-test-reseau.pdf\");};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"Test de Performance R\\xE9seau\"),/*#__PURE__*/React.createElement(\"div\",{className:\"button-container\"},/*#__PURE__*/React.createElement(\"button\",{className:\"start\",onClick:startTests},\"Go\"),/*#__PURE__*/React.createElement(\"button\",{className:\"stop\",onClick:stopTests},\"Stop\")),/*#__PURE__*/React.createElement(\"p\",null,\"Latence : \",latency),/*#__PURE__*/React.createElement(\"p\",null,\"Latence moyenne : \",calculateAverageLatency()),/*#__PURE__*/React.createElement(\"p\",null,\"Perte de paquets : \",packetLoss,\"%\"),/*#__PURE__*/React.createElement(\"p\",null,\"D\\xE9bit : \",bandwidth),/*#__PURE__*/React.createElement(\"p\",null,\"D\\xE9bit moyen : \",averageBandwidth),error&&/*#__PURE__*/React.createElement(\"p\",{style:{color:'red'}},error),/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex',flexDirection:'column',justifyContent:'flex-start',flexGrow:1}},/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center',flexDirection:'column',gap:'80px'}},/*#__PURE__*/React.createElement(\"div\",{id:\"latencyGraph\",style:{height:\"300px\",width:\"80%\"}},/*#__PURE__*/React.createElement(\"h3\",{style:{color:'#D5006D'}},\"Graphique de la Latence\"),/*#__PURE__*/React.createElement(Line,{data:chartDataLatency,options:chartOptions})),/*#__PURE__*/React.createElement(\"div\",{id:\"bandwidthGraph\",style:{height:\"300px\",width:\"80%\"}},/*#__PURE__*/React.createElement(\"h3\",{style:{color:'#003366'}},\"Graphique du D\\xE9bit\"),/*#__PURE__*/React.createElement(Line,{data:chartData,options:chartOptions})),/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex',justifyContent:'center',alignItems:'center',marginTop:'auto',paddingBottom:'20px'}},/*#__PURE__*/React.createElement(\"button\",{onClick:generateReport},\"G\\xE9n\\xE9rer un rapport\")))));};export default NetworkTest;","map":{"version":3,"names":["React","useState","useEffect","Line","axios","jsPDF","useHistory","html2canvas","UserService","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","NetworkTest","latency","setLatency","packetLoss","setPacketLoss","isTesting","setIsTesting","socket","setSocket","error","setError","latencyData","setLatencyData","timeStamps","setTimeStamps","bandwidth","setBandwidth","bandwidthData","setBandwidthData","averageBandwidth","setAverageBandwidth","latencySocket","setLatencySocket","maxDataPoints","username","getCurrentUser","close","console","log","startTests","startLatencyTest","startBandwidthTest","calculateAverageLatency","length","sum","reduce","acc","value","toFixed","calculateAverageBandwidth","data","saveMetrics","averageLatency","metrics","latence","parseFloat","debit","packetlost","performanceData","response","post","alert","newLatencySocket","WebSocket","onopen","onmessage","event","message","trim","startsWith","newLatency","split","prevData","updatedData","slice","newPacketLoss","timestamp","Date","toLocaleTimeString","prevTimestamps","updatedTimestamps","onclose","onerror","newSocket","totalDataReceived","startTime","performance","now","dataSize","currentTime","elapsedTimeInSeconds","bandwidthMbps","average","stopTests","chartDataLatency","labels","datasets","label","borderColor","backgroundColor","fill","tension","pointRadius","pointBackgroundColor","borderWidth","pointHoverRadius","chartData","scales","x","title","display","text","color","grid","y","chartOptions","responsive","maintainAspectRatio","plugins","legend","tooltip","enabled","generateReport","pdf","currentY","testDate","toLocaleString","setFontSize","concat","endTime","maxLatency","Math","max","minLatency","min","maxBandwidth","minBandwidth","setTextColor","join","latencyGraph","document","getElementById","bandwidthGraph","latencyCanvas","scale","width","scrollWidth","height","scrollHeight","latencyImg","toDataURL","addImage","addPage","bandwidthCanvas","bandwidthImg","save","createElement","className","onClick","style","flexDirection","justifyContent","flexGrow","alignItems","gap","id","options","marginTop","paddingBottom"],"sources":["C:/Users/DELL/Net-Perf-Analyzer/frontend/src/components/NetworkTest.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport html2canvas from \"html2canvas\";\r\nimport './NetworkTest.css';\r\nimport UserService from './UserService';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\n\r\n// Enregistrer les composants nécessaires de Chart.js\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst NetworkTest = () => {\r\n  const [latency, setLatency] = useState(null);\r\n  const [packetLoss, setPacketLoss] = useState(0);\r\n  const [isTesting, setIsTesting] = useState(false);\r\n  const [socket, setSocket] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [latencyData, setLatencyData] = useState([]);\r\n  const [timeStamps, setTimeStamps] = useState([]);\r\n  const [bandwidth, setBandwidth] = useState(null);\r\n  const [bandwidthData, setBandwidthData] = useState([]);\r\n  const [averageBandwidth, setAverageBandwidth] = useState(0);\r\n  const [latencySocket, setLatencySocket] = useState(null);\r\n  const maxDataPoints = 30;\r\n const username = UserService.getCurrentUser();\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.close();\r\n        console.log('WebSocket déconnecté');\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const startTests = () => {\r\n    setIsTesting(true);\r\n    startLatencyTest();\r\n    startBandwidthTest();\r\n  };\r\n\r\n  const calculateAverageLatency = () => {\r\n    if (latencyData.length === 0) return 0;\r\n    const sum = latencyData.reduce((acc, value) => acc + value, 0);\r\n    return (sum / latencyData.length).toFixed(2);\r\n  };\r\n\r\n  const calculateAverageBandwidth = (data) => {\r\n    if (data.length === 0) return 0;\r\n    const sum = data.reduce((acc, value) => acc + value, 0);\r\n    return (sum / data.length).toFixed(2);\r\n  };\r\n\r\n  const saveMetrics = async (averageLatency) => {\r\n\r\n  console.log(\"Nom d'utilisateur actuel :\", username);\r\n    try {\r\n      const metrics = {\r\n        latence: parseFloat(averageLatency),\r\n        debit: parseFloat(averageBandwidth),\r\n        packetlost: packetLoss,\r\n      };\r\n      const data = {\r\n        username: username, // ou un autre moyen d'obtenir le username\r\n        performanceData: metrics\r\n      };\r\n\r\n      const response = await axios.post('http://192.168.22.56:8080/api/network-metrics/save',data);\r\n      console.log(response.data);\r\n      alert('Les métriques ont été sauvegardées avec succès.');\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la sauvegarde des métriques :\", error);\r\n      alert('Erreur lors de la sauvegarde des métriques.');\r\n    }\r\n  };\r\n\r\n  const startLatencyTest = () => {\r\n    if (isTesting) {\r\n      setError('Le test de latence est déjà en cours.');\r\n      return;\r\n    }\r\n    setError('');\r\n    setIsTesting(true);\r\n\r\n    const newLatencySocket = new WebSocket(\"ws://192.168.0.167:8080/ws/latency\");\r\n\r\n    newLatencySocket.onopen = () => {\r\n      console.log('WebSocket de latence connecté');\r\n      setLatency('Connexion établie. En attente de la latence...');\r\n    };\r\n\r\n    newLatencySocket.onmessage = (event) => {\r\n      const message = event.data.trim();\r\n      console.log('Message reçu : ', message);\r\n\r\n      if (message.startsWith('Latence:')) {\r\n        const newLatency = parseFloat(message.split(':')[1].trim());\r\n        setLatency(newLatency);\r\n        setLatencyData(prevData => {\r\n          const updatedData = [...prevData, newLatency];\r\n          return updatedData.length > maxDataPoints ? updatedData.slice(1) : updatedData;\r\n        });\r\n      }\r\n\r\n      if (message.startsWith('Perte de paquets:')) {\r\n        const newPacketLoss = parseFloat(message.split(':')[1].trim());\r\n        setPacketLoss(newPacketLoss);\r\n      }\r\n\r\n      const timestamp = new Date().toLocaleTimeString();\r\n      setTimeStamps(prevTimestamps => {\r\n        const updatedTimestamps = [...prevTimestamps, timestamp];\r\n        return updatedTimestamps.length > maxDataPoints ? updatedTimestamps.slice(1) : updatedTimestamps;\r\n      });\r\n    };\r\n\r\n    newLatencySocket.onclose = () => {\r\n      console.log('WebSocket de latence déconnecté');\r\n      setIsTesting(false);\r\n    };\r\n\r\n    newLatencySocket.onerror = (error) => {\r\n      console.error('Erreur WebSocket de latence :', error);\r\n      setError('Erreur WebSocket : Vérifiez votre connexion.');\r\n      setIsTesting(false);\r\n    };\r\n\r\n    setLatencySocket(newLatencySocket);\r\n  };\r\n\r\n  const startBandwidthTest = () => {\r\n    if (isTesting) {\r\n      setError(\"Le test de débit est déjà en cours.\");\r\n      return;\r\n    }\r\n\r\n    setError(\"\");\r\n    setIsTesting(true);\r\n    const newSocket = new WebSocket(\"ws://192.168.22.56:8080/ws/bandwidth\");\r\n    setSocket(newSocket);\r\n\r\n    let totalDataReceived = 0;\r\n    let startTime = performance.now();\r\n\r\n    newSocket.onopen = () => {\r\n      console.log(\"WebSocket connecté\");\r\n      totalDataReceived = 0;\r\n      startTime = performance.now();\r\n    };\r\n\r\n    newSocket.onmessage = (event) => {\r\n      const dataSize = event.data.length;\r\n      totalDataReceived += dataSize;\r\n\r\n      const currentTime = performance.now();\r\n      const elapsedTimeInSeconds = (currentTime - startTime) / 1000;\r\n\r\n      const bandwidthMbps =\r\n        (totalDataReceived * 8) / (elapsedTimeInSeconds * 1024 * 1024);\r\n      setBandwidth(bandwidthMbps.toFixed(2));\r\n\r\n      const timestamp = new Date().toLocaleTimeString();\r\n      setBandwidthData((prevData) => {\r\n        const updatedData = [...prevData, parseFloat(bandwidthMbps.toFixed(2))];\r\n        const average = calculateAverageBandwidth(updatedData);\r\n        setAverageBandwidth(average);\r\n        return updatedData.length > maxDataPoints\r\n          ? updatedData.slice(1)\r\n          : updatedData;\r\n      });\r\n      setTimeStamps((prevTimestamps) => {\r\n        const updatedTimestamps = [...prevTimestamps, timestamp];\r\n        return updatedTimestamps.length > maxDataPoints\r\n          ? updatedTimestamps.slice(1)\r\n          : updatedTimestamps;\r\n      });\r\n    };\r\n\r\n    newSocket.onclose = () => {\r\n      console.log(\"WebSocket déconnecté\");\r\n      setIsTesting(false);\r\n    };\r\n\r\n    newSocket.onerror = (error) => {\r\n      console.error(\"Erreur WebSocket :\", error);\r\n      setError(\"Erreur WebSocket : Vérifiez votre connexion.\");\r\n      setIsTesting(false);\r\n    };\r\n  };\r\n\r\n  const stopTests = () => {\r\n    if (socket) {\r\n      socket.close();\r\n      console.log(\"Tests arrêtés.\");\r\n      setIsTesting(false);\r\n    }\r\n    if (latencySocket) {\r\n      latencySocket.close();\r\n      console.log(\"Test de latence arrêté.\");\r\n      setIsTesting(false);\r\n    }\r\n\r\n    const averageLatency = calculateAverageLatency();\r\n    console.log(\"Latence moyenne :\", averageLatency);\r\n    saveMetrics(averageLatency);\r\n  };\r\n\r\n  const chartDataLatency = {\r\n    labels: timeStamps,\r\n    datasets: [\r\n      {\r\n        label: 'Latence (ms)',\r\n        data: latencyData,\r\n        borderColor: 'rgba(255, 105, 180, 1)', // Couleur de la courbe\r\n        backgroundColor: 'rgba(255, 105, 180, 0.2)', // Couleur du fond léger\r\n        fill: true, // Remplissage sous la courbe\r\n        tension: 0.4, // Rendre la courbe plus fluide\r\n        pointRadius: 5, // Taille des points\r\n        pointBackgroundColor: 'rgba(255, 105, 180, 1)', // Couleur des points\r\n        borderWidth: 3, // Épaisseur de la ligne\r\n        pointHoverRadius: 8, // Taille du point au survol\r\n      },\r\n    ],\r\n  };\r\n\r\n const chartData = {\r\n   labels: timeStamps,\r\n   datasets: [\r\n     {\r\n       label: \"Débit (Mbps)\",\r\n       data: bandwidthData,\r\n       borderColor: \"rgba(0, 0, 128, 1)\", // Couleur bleu marine pour la courbe\r\n       backgroundColor: \"rgba(0, 0, 128, 0.2)\", // Fond léger bleu marine\r\n       fill: true, // Remplissage sous la courbe\r\n       tension: 0.4, // Rendre la courbe plus fluide\r\n       pointRadius: 5, // Taille des points\r\n       pointBackgroundColor: 'rgba(0, 0, 128, 1)', // Couleur bleu marine des points\r\n       borderWidth: 2, // Épaisseur de la ligne\r\n       pointHoverRadius: 8, // Taille du point au survol\r\n     },\r\n   ],\r\n\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: 'Temps',\r\n          color: '#000',\r\n        },\r\n        grid: {\r\n          color: '#e1e1e1', // Couleur des lignes de grille\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: 'Valeur',\r\n          color: '#000',\r\n        },\r\n        grid: {\r\n          color: '#e1e1e1', // Couleur des lignes de grille\r\n        },\r\n      },\r\n    },\r\n\r\n  };\r\n\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: true,\r\n      },\r\n      tooltip: {\r\n        enabled: true,\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: false,\r\n          text: \"Temps\",\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n const generateReport = async () => {\r\n    const pdf = new jsPDF(\"p\", \"mm\", \"a4\");\r\n    let currentY = 10; // Position Y de départ\r\n\r\n    // Récupérer la date actuelle du test\r\n    const testDate = new Date().toLocaleString();  // Format local de la date et heure\r\n\r\n    // Ajouter un titre\r\n    pdf.setFontSize(18);\r\n    pdf.text(\"Rapport de Test Réseau\", 10, currentY);\r\n    currentY += 15; // Augmenter l'espacement après le titre\r\n\r\n    // Ajouter la date du test\r\n    pdf.setFontSize(12);\r\n    pdf.text(`Date du test : ${testDate}`, 10, currentY);\r\n    currentY += 10; // Espacement après la date\r\n\r\n    // Détails des tests\r\n    const startTime = timeStamps[0] || \"N/A\";\r\n    const endTime = timeStamps[timeStamps.length - 1] || \"N/A\";\r\n    const maxLatency = latencyData.length ? Math.max(...latencyData) : \"N/A\";\r\n    const minLatency = latencyData.length ? Math.min(...latencyData) : \"N/A\";\r\n    const maxBandwidth = bandwidthData.length ? Math.max(...bandwidthData) : \"N/A\";\r\n    const minBandwidth = bandwidthData.length ? Math.min(...bandwidthData) : \"N/A\";\r\n\r\n    pdf.text(`Durée du test : ${startTime} - ${endTime}`, 10, currentY);\r\n    currentY += 10;\r\n    pdf.text(`Latence moyenne : ${calculateAverageLatency()} ms`, 10, currentY);\r\n    currentY += 10;\r\n    pdf.text(`Latence maximale : ${maxLatency} ms`, 10, currentY);\r\n    currentY += 10;\r\n    pdf.text(`Latence minimale : ${minLatency} ms`, 10, currentY);\r\n    currentY += 10;\r\n    pdf.text(`Débit moyen : ${averageBandwidth} Mbps`, 10, currentY);\r\n    currentY += 10;\r\n    pdf.text(`Débit maximal : ${maxBandwidth} Mbps`, 10, currentY);\r\n    currentY += 10;\r\n    pdf.text(`Débit minimal : ${minBandwidth} Mbps`, 10, currentY);\r\n    currentY += 10;\r\n    pdf.text(`Perte de paquets : ${packetLoss}%`, 10, currentY);\r\n    currentY += 15; // Plus d'espace avant la section des détails\r\n\r\n    // Section Détails des Tests\r\n    pdf.setFontSize(12);\r\n    pdf.setTextColor(0, 102, 204);\r\n    pdf.text(\"Détails des Tests:\", 14, currentY);\r\n    currentY += 10; // Espacement après le titre de section\r\n\r\n    pdf.setFontSize(12);\r\n    pdf.setTextColor(50, 50, 50);\r\n    pdf.text(`Latence (ms): ${latencyData.join(\", \")}`, 10, currentY);\r\n    currentY += 10;\r\n    pdf.text(`Débit (Mbps): ${bandwidthData.join(\", \")}`, 10, currentY);\r\n    currentY += 8; // Espacement avant d'ajouter les graphiques\r\n\r\n    // Ajouter les graphiques\r\n    const latencyGraph = document.getElementById(\"latencyGraph\");\r\n    const bandwidthGraph = document.getElementById(\"bandwidthGraph\");\r\n\r\n    if (latencyGraph) {\r\n\r\n      const latencyCanvas = await html2canvas(latencyGraph, {\r\n        scale: 2, // Augmente la qualité de la capture\r\n        width: latencyGraph.scrollWidth, // Capture la largeur complète\r\n        height: latencyGraph.scrollHeight // Capture la hauteur complète\r\n      });\r\n      const latencyImg = latencyCanvas.toDataURL(\"image/png\");\r\n      pdf.addImage(latencyImg, \"PNG\", 10,currentY  , 190, 80); // Ajuster la taille d'image si nécessaire\r\n      currentY += 85; // Ajuster l'espacement après le graphique de latence\r\n    }\r\n\r\n    if (bandwidthGraph) {\r\n      pdf.addPage();\r\n      const bandwidthCanvas = await html2canvas(bandwidthGraph, {\r\n        scale: 2, // Augmente la qualité de la capture\r\n        width: bandwidthGraph.scrollWidth, // Capture la largeur complète\r\n        height: bandwidthGraph.scrollHeight // Capture la hauteur complète\r\n      });\r\n      const bandwidthImg = bandwidthCanvas.toDataURL(\"image/png\");\r\n      pdf.addImage(bandwidthImg, \"PNG\", 10, 10, 190, 80); // Ajuster la taille d'image si nécessaire\r\n    }\r\n\r\n    // Télécharger le fichier PDF\r\n    pdf.save(\"rapport-test-reseau.pdf\");\r\n };\r\n\r\n\r\n   return (\r\n<div>\r\n  <h2>Test de Performance Réseau</h2>\r\n  <div className=\"button-container\">\r\n    <button className=\"start\" onClick={startTests}>Go</button>\r\n    <button className=\"stop\" onClick={stopTests}>Stop</button>\r\n  </div>\r\n\r\n  <p>Latence : {latency}</p>\r\n  <p>Latence moyenne : {calculateAverageLatency()}</p>\r\n  <p>Perte de paquets : {packetLoss}%</p>\r\n  <p>Débit : {bandwidth}</p>\r\n  <p>Débit moyen : {averageBandwidth}</p>\r\n\r\n  {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n<div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'flex-start', flexGrow: 1 }}>\r\n  <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column', gap: '80px' }}>\r\n    <div id=\"latencyGraph\" style={{ height: \"300px\", width: \"80%\" }}>\r\n      <h3 style={{ color: '#D5006D' }}>Graphique de la Latence</h3>\r\n      <Line data={chartDataLatency} options={chartOptions} />\r\n    </div>\r\n\r\n    <div id=\"bandwidthGraph\" style={{ height: \"300px\", width: \"80%\" }}>\r\n      <h3 style={{ color: '#003366' }}>Graphique du Débit</h3>\r\n      <Line data={chartData} options={chartOptions} />\r\n    </div>\r\n\r\n    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: 'auto', paddingBottom: '20px' }}>\r\n      <button onClick={generateReport}>Générer un rapport</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n</div>\r\n\r\n\r\n     );\r\n };\r\n\r\n export default NetworkTest;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}