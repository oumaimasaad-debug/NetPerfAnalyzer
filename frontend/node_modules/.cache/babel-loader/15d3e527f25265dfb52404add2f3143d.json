{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (username, email, password) => dispatch => {\n  return AuthService.register(username, email, password).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","username","email","password","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","user","logout"],"sources":["C:/Users/DELL/Net-Perf-Analyzer/frontend/src/actions/auth.js"],"sourcesContent":["import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  SET_MESSAGE,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nexport const register = (username, email, password) => (dispatch) => {\r\n  return AuthService.register(username, email, password).then(\r\n    (response) => {\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: response.data.message,\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n  return AuthService.login(username, password).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: { user: data },\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  AuthService.logout();\r\n\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n"],"mappings":"AAAA,SACEA,gBAAgB,EAChBC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,MAAM,EACNC,WAAW,QACN,SAAS;AAEhB,OAAOC,WAAW,MAAM,0BAA0B;AAElD,OAAO,MAAMC,QAAQ,GAAGA,CAACC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,KAAMC,QAAQ,IAAK;EACnE,OAAOL,WAAW,CAACC,QAAQ,CAACC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,CAAC,CAACE,IAAI,CACxDC,QAAQ,IAAK;IACZF,QAAQ,CAAC;MACPG,IAAI,EAAEd;IACR,CAAC,CAAC;IAEFW,QAAQ,CAAC;MACPG,IAAI,EAAET,WAAW;MACjBU,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACC;IACzB,CAAC,CAAC;IAEF,OAAOC,OAAO,CAACC,OAAO,CAAC,CAAC;EAC1B,CAAC,EACAC,KAAK,IAAK;IACT,MAAMH,OAAO,GACVG,KAAK,CAACP,QAAQ,IACbO,KAAK,CAACP,QAAQ,CAACG,IAAI,IACnBI,KAAK,CAACP,QAAQ,CAACG,IAAI,CAACC,OAAO,IAC7BG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACC,QAAQ,CAAC,CAAC;IAElBV,QAAQ,CAAC;MACPG,IAAI,EAAEb;IACR,CAAC,CAAC;IAEFU,QAAQ,CAAC;MACPG,IAAI,EAAET,WAAW;MACjBU,OAAO,EAAEE;IACX,CAAC,CAAC;IAEF,OAAOC,OAAO,CAACI,MAAM,CAAC,CAAC;EACzB,CACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,KAAK,GAAGA,CAACf,QAAQ,EAAEE,QAAQ,KAAMC,QAAQ,IAAK;EACzD,OAAOL,WAAW,CAACiB,KAAK,CAACf,QAAQ,EAAEE,QAAQ,CAAC,CAACE,IAAI,CAC9CI,IAAI,IAAK;IACRL,QAAQ,CAAC;MACPG,IAAI,EAAEZ,aAAa;MACnBa,OAAO,EAAE;QAAES,IAAI,EAAER;MAAK;IACxB,CAAC,CAAC;IAEF,OAAOE,OAAO,CAACC,OAAO,CAAC,CAAC;EAC1B,CAAC,EACAC,KAAK,IAAK;IACT,MAAMH,OAAO,GACVG,KAAK,CAACP,QAAQ,IACbO,KAAK,CAACP,QAAQ,CAACG,IAAI,IACnBI,KAAK,CAACP,QAAQ,CAACG,IAAI,CAACC,OAAO,IAC7BG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACC,QAAQ,CAAC,CAAC;IAElBV,QAAQ,CAAC;MACPG,IAAI,EAAEX;IACR,CAAC,CAAC;IAEFQ,QAAQ,CAAC;MACPG,IAAI,EAAET,WAAW;MACjBU,OAAO,EAAEE;IACX,CAAC,CAAC;IAEF,OAAOC,OAAO,CAACI,MAAM,CAAC,CAAC;EACzB,CACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,MAAM,GAAGA,CAAA,KAAOd,QAAQ,IAAK;EACxCL,WAAW,CAACmB,MAAM,CAAC,CAAC;EAEpBd,QAAQ,CAAC;IACPG,IAAI,EAAEV;EACR,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}